@implements IDisposable

@if (allstate.ShowUser)

{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header ">
                        <h4 class="float-start"> Manage User</h4>
                    </div>
                    <div class="card-header " style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th scope="col">#</th>
                                            <th scope="col">Id</th>
                                            <th scope="col"> Name</th>
                                            <th scope="col"> Email</th>
                                            <th scope="col"> Role</th>
                                            <th scope="col">Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (ManageUsers is not null)
                                        {
                                            int count = 1;
                                        foreach (var item in ManageUsers)
                                            {
                                                <tr>
                                                    <th scope="row">@count</th>
                                                    <td>@item.UserId</td>
                                                    <td>@item.Name</td>
                                                    <td>@item.Email</td>
                                                    <td>@item.Role</td>
                                                    <td>
                                                    <i class="cursorSyle bi bi-pencil text-info" id="" @onclick="()=>EditClicked(item)"> </i>
                                                    <i class="cursorSyle bi bi-trash text-danger" id="" @onclick="()=>DeleteClicked(item)"> </i>
                                                    </td>
                                                </tr>
                                                count++;
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="5">
                                                    <div class="alert alert-info text-center">No User Registered  Yet!</div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
        
}
    <UserDialog @ref="userDialog"
              HandleSaveOperationEvent="HandleSaveOperationEvent"
            ManageUser="ManageUser"
            SystemRoles="SystemRoles" />
             
<style>
    .cursorSyle {
        cursor: pointer;
    }
</style>

@code {
    UserDialog? userDialog;
    ManageUser ManageUser = new();
    public List<ManageUser> ManageUsers { get; set; } = new();
    public List<SystemRole> SystemRoles { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
        await GetRoles();
        allstate.Action += StateHasChanged;
    }
    private async Task GetUsers()
    {
        ManageUsers = await accountService.GetUsers();    
    }
    private async Task GetRoles()
    {

        SystemRoles = await accountService.GetRoles();
    }
    void OpenDialog()
    {
        userDialog?.OpenDialog();
    }
    private async Task HandleSaveOperationEvent(ManageUser manageUser)
    {
        var result = await accountService.UpdateUser(manageUser);
        bool successCheck = await DisplayMessage(result.Flag, result.Message);
        if (successCheck)
        {
            ManageUser = new();
            await GetUsers();
        }
    }
    private void EditClicked(ManageUser user)
    {
        ManageUser = user;
        OpenDialog();
    }
    private async Task DeleteClicked(ManageUser user)
    {
        bool confirm = await dialogService.ConfirmAsync($"Delete `` {user.Name} `` ?", "Yes Delete it!");
        if (!confirm) return;
        var response = await accountService.DeleteUser(user.UserId);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
            await GetUsers();

    }



    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }

    }
    public void Dispose()
    {
        allstate.Action -= StateHasChanged;
    }
}
