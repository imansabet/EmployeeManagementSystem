<h3>UserPage</h3>

@code {
    UserDialog? userDialog;
    ManageUser ManageUser = new();
    public List<ManageUser> ManageUsers { get; set; } = new();
    public List<SystemRole> SystemRole { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
        await GetRoles();
        allstate.Action += StateHasChanged;
    }
    public async Task GetUsers()
    {
        ManageUsers = await accountService.GetUsers();    
    }
    public async Task GetRoles()
    {

        ManageUsers = await accountService.GetRoles();
    }
    void OpenDialog()
    {
        userDialog?.OpenDialog();
    }
    private async Task HandleSaveOperationEvent(ManageUser manageUser)
    {
        var result = await accountService.Updateuser(manageUser);
        bool successCheck = await DisplaMessage(result.Flag, result.Message);
        if (successCheck)
        {
            ManageUser = new();
            await GetUsers();
        }
    }
    private void EditClicked(ManageUser user)
    {
        ManageUser = user;
        OpenDialog();
    }
    private async Task DeleteClicked(Town Town)
    {
        bool confirm = await dialogService.ConfirmAsync($"Delete `` {Town.Name} `` ?", "Yes Delete it!");
        if (!confirm) return;
        var response = await accountService.DeleteUser(Town.Id, Constants.TownBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
            await GetUsers();

    }



    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }

    }
    public void Dispose()
    {
        allstate.Action -= StateHasChanged;
    }
}
